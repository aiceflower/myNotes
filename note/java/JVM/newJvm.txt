一、java虚拟机的组成部分
1.类加载子系统
负责从文件系统或网络中加载Class信息，加载的信息放在方法区的内存空间
2.方法区
存放类信息，常量信息，常量池信息，包括字符串字面量和数字常量等
3.java堆
在java虚拟机启动的时候创建java堆，它是java程序最主要的内存工作区域，
几乎所有的对象实例都放到java堆中，堆空间是所有线程共享的
4.直接内存
java的NIO库允许java程序使用直接内存，从而提高性能，通常直接内存性能会高于java堆，读写频繁的地方可以考虑使用。
5.栈
每个虚拟机线程都有一个私有的栈，一个线程的java栈在线程创建的时候被创建，java栈保存者局部变量，方法参数，java的方法调用，返回值等。
6.本地方法栈
与java栈非常相似，最大的不同为本地方法栈用于本地方法的调用，java虚拟机允许java直接调用本地方法(通常由C编写)
7.垃圾收集系统
java的核心也是必不可少的，java有一套自己的垃圾清理机制，开发人员无须手工清理
8.PC(Program Counter)寄存器也是每个线程私有的空间，java虚拟机会为每个线程创建PC寄存器，在任意时刻，一个java线程总是在执行一个方法，这个方法被称为当前方法，如果当前方法为是本地方法，PC寄存器就会执行当前正在被执行的命令，如果是本地方法，则PC寄存器值为undefined,寄存器存放，执行环境指针，程序计数器，操作栈指针，计算的变量指针等信息。
9.执行引擎
最核心的组件，负责执行java虚拟机字节码，一般用户先进行编译成机器码后执行。
二、堆，栈，方法区的概念与联系
堆：解决的是数据存储的问题，即数据怎么放，放在哪儿
栈：解决的是程序运行的问题，即程序如何执行，或者说如何处理数据
方法区：辅助堆栈的块永久区(perm),解决堆栈信息的产生，是先决条件，创建一个对象时，对象的类信息，静态信息都存放在方法区中
三、java栈组成
局部变量表：用于报错函数的参数及局部变量
操作数栈：存放计算过程的中间结果，同时作为计算过程中变量临时的存储空间
帧数据区：除了局部变量表和操作数栈以外，栈还需要一些数据来支持常量池的解析，这里帧数据区保存者访问常量池的指针，方便程序访问常量池，另外当函数返回或出现异常时，虚拟机必须有一个异常处理表，方便发生异常的时候能找到异常的代码，因此异常处理表也是帧数据区的一部分。
四、配置参数
0.输出gc log到文件
-Xloggc:d:/gc.log
1.堆分配参数
-XX:+PrintGC 使用这个参数，只要发生GC的时候就会打印日志
-XX:+UseSerialGC 配置串行回收器
-XX:+PrintGCDetails 可查看详细信息，包括各个区的情况
-Xms: 设置java程序启动进初始堆大小
-Xmx: 设置java程序能获得的最大堆大小
-XX:+PrintCommandLineFlags 打印虚拟机的配置参数
2.新生代配置
-Xmn: 设置新生代大小，这个参数对系统性能及GC行为有很大影响，一般设置为整个堆的1/3,1/4
-XX:SurvivorRatio: 设置新生代中from区和to区的空间的比例为eden/from或eden/to
-XX:NewRatio: 老年代比上新生代
3.栈配置
-Xss1m 指定线程的最大栈空间，直接决定函数可调用的最大深度。
4.方法区配置
-XX:PermSize=64M,默认为64M
5.直接内存配置
-XX:MaxDirectMemorySize,如果为配置则为最大堆空间，即-Xmx
-XX:MaxPermSize=64M
6.从新生代到老年代次数
-XX:MaxTenuringThreshold=15
7.新生代装不下大对象的时候会直接进入老年代
-XX:PretenureSizeTheshold=10240
8.对于数据不太大的元素jvm默认会分配到TLAB区，因此失去了老年代的分配机会(与6相对应，比如设置大小为1k)，TLAB[线程本地分配缓存]
-XX:-UseTLAB  [-代表不使用TLAB区，默认是使用的]
-XX:+TLABSize
-XX:+PrintTLAB 打印TLAB区信息
java创建对象分配：
先到栈-->失败到TLAB区-->失败到老年代-->失败到新生代
9.垃圾回收方式
串行：
-XX:+UseSerialGC 配置串行回收器
并行：
-XX:+UseParNewGC [新生代ParNew回收器]
-XX:+UseAdaptiveSizePolicy[打开自适应，新生代ParalleGC回收器，利用了复制算法，关注系统的吞吐量]
-XX:+UseParalleOldGC[老年代回收器，关注吞吐量，利用了标记压缩算法]
配置并行线程数量：
-XX:ParallelGCThreads=3
-XX:UseConcMarkSweepGC[CMS回收器，并发标记清除，选用标记清除算法，关注系统停顿时间]
-XX:ConcGCThreads=3[设置CMS并发线程数量]
-XX:CMSInitatingOccupancyFraction [指定CMS开始回收阀值，默认为68当选用率到68%的时候回收]
注：CMS一边程序运行着，一边垃圾回收着，一但内存不足，则回收完毕程序才能继续运行。
-XX:UseG1GG [G1回收器]
-XX:MaxGCPauseMillis[指定最大停顿时间]
-XX:ParallelGCThreads=3[配置线程数量]
五、内存分析工具
Memory Analyzer 1.5.0
http://download.eclipse.org/mat/1.5/update-site/
六、虚拟机工作模式
client模式和server模式
client模式，启动速度快，性能慢
server模式，启动速度慢，性能快
在jdk1.7后基本都是server模式