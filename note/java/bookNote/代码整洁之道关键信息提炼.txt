第一章：整洁代码
1.代码中呈现了需求的细节，我们永远抛不掉代码。
2.对于糟糕的代码，我们都曾经说过有朝一日会回头清理，但有朝一日永远不会到来。
3.混乱的代码驱动生产力向零那端不断下降。
4.花时间保持代码的整洁不但有关效率，还有关生存。
5.混乱只会立刻拖慢你，做得快的唯一方法就是始终尽可能保持代码整洁。
6.编写整洁代码的程序员就像是艺术家，他能用一系列变换把一块白板变作由优雅代码构成的系统。
7.整洁的代码只做好一件事，要在意并着力照料你的代码。
8.简单代码：1.能通过所有的测试 2.没在重复的代码 3.八面来风系统中的全部设计理念 4.包括尽量少的实体，如类、方法、函数等。
9.写代码的时候，记得自己是作者，要为评判你工作的读者写代码。
10.如果每次签入时，代码都比签出时干净，那么代码就不会腐坏。(让营地比你来时更干净)
11.艺术书并不保证你读过之后能成为艺术家，只能告诉你其他艺术家用过的工具、技术和思维过程。
第二章：有意义的命名
1.名副其实，一旦发现更好的名称，就换掉旧的。
2.避免误导，不用专有名称，如UNIX平台或类UNIX平台hp,aix,sco等
3.别用accountList来指称一组帐号，除非他真的是List类型，用accountGroup或bunchOfAccounts甚至直接用accounts都会好一些
4.不用小写字母l和大写字母O做变量名，他们看起来完全像"壹"和"零"
5.做有意义的区分，如，因为同一作用范围内两样不同的东西不能重名就可能会随手改掉其中一个名称，有时干脆以错误的拼写充数 String name1; String name2;
6.有一个Product类，如果还有一个ProductInfo或ProductData类，它们名称虽然不同意思却无区别。又如 Customer和CustomerObject区别何在
7.如果缺少明确的约定，变量moneyAmount与money没区别，customeInfo与customer没区别，accountData与account没区别，theMessage与message没区别，要区分名称要以读者能鉴别不同之处的方式来区分
8.使用读得出来的名称
9.使用可搜索的名称，如MAX_CLASSES_PER_STUDENT,同样e就是一个不便于搜索的变量名，而WORK_DAYS_PER_WEEK要比数字5好搜索的多
10.接口或实现提供ShapeFactory或是ShapeFactoryImp比IShapeFactory要好
11.类名和对象名应该是名词或名词短语，如Customer、WikiPage、Account和AddressParser避免使用Manager、Processor、Data或Info这样的类名
12.方法名应当是动词或动词短语。如postPayment、deletePage或save。属性访问器、修改器和断言应该根据其值命名、依据javabean标准加上get、set、和is前缀
13.每个概念对应一个词，并一以贯之，使用fetch、retrieve和get给多个类中的同种方法命名，你怎么记得哪个类中用的是哪个方法呢。
14.别用双关语，即一个单词用于不同的目的。
15.使用解决方案领域名称，只有程序员才会读你的代码，所以尽管用那些计算机科学术语、算法名、模式名、数学术语。
第三章：函数
1.函数的第一规则是要短小，第二规则还是要短小。
2.函数的缩进层级不应该多于一层或两层
3.函数应该只做一件事，做好这件事
4.函数中的语句要在同一抽象层级上
5.对于switch如果只出现一次，用于创建多太对象，并且隐藏在某个继承关系中
6.给函数取一个具有描述性的名称
7.最理想的参数数量是零、其次是一，再次是二，应尽量避免三及以上。
8.标识参数丑陋不堪，向函数传入布尔值，就是宣称本函数不止做一件事。
9.写二元函数时可尝试把其中一个参数改成类的一个字段，函数就成了一元的了，这样就简单多了。
10.函数应避免使用输出参数，如果函数必须要修改某种状态，就修改所属对象的状态吧。
11.使用异常代替返回错误码，新异常可以从异常类中派生出来，而新错误码需要修改原类。
12.错误处理就是一件事，把try和catch代码块主体部分抽离出来另外形成函数。
13.别重复自己
第四章：注释
1.与其花时间编写你搞出的糟糕的代码的注释，不如花时间清洁那堆糟糕的代码。
2.可以用代码解释你大部分的意图，有时候只需要创建一个描述与注释所言同一事务的函数即可。
3.有时，注释把某些晦涩难明的参数或返回值的意义翻译为某种可读形式，更好的方法是尽量让参数或返回值自身就足够清楚，但如果参数或返回值是标准库的一部分，就需要帮助阐释的注释。
4.有时，用于警告其他程序员会出现某种后果的注释也是有用的。
5.如果你在编写公共API，就该为它编写良好的JavaDoc
6.如果你决定写注释，就要花必要的时间确保写出最好的注释。
7.不写无意义的注释
8.如果你发现自己想标记右括号，其实应该做的是缩短函数。
9.源代码控制系统是"归属与属名"最好的归属地
10.注释掉的代码应该被删除
11.别在注释中添加有趣的历史性话题或者无关的细节描述
12.注释及其描述的代码之间的联系应该是显而易见的。
第五章：格式
1.代码格式不可忽略，必须严肃对待。代码格式关乎沟通，而沟通是专业开发者的头等大事。
2.紧密相关的代码应该相互靠近
3.某个函数调用了另一个，就应该把它们放到一起，而且调用者应该尽可能放在被调用者上面。
第六章：对象和数据结构
1.我们不愿意暴露数据细节，更愿意以抽象形态表述数据。
2.对于添加新类型而不是新函数时选择面向对象比较合适，反之选择面向过程比较合适。
3.方法不应调用由任何函数返回的对象的方法。换言之，只跟朋友谈话，不跟陌生人谈话。
4.避免一半是结构，一半是对象的混杂。
第七章：错误处理
1.错误处理很重要，但如果它搞乱了代码逻辑，就是错误的做法。
2.应该创建信息充分的错误消息，并和异常一起传递出去。
3.通过打包调用API，确保函数返回通用异常类型，从而简化代码。
4.创建一个类或配置一个对象，用来处理特例，你来处理特例，客户代码就不用应付异常行为了。异常行为被封装到了特例对象中。
5.别返回null值，如果你打算在方法中返回null值，不如抛出异常，或是返回特例对象。java有Collections.emptyList()返回空list
6.别传递null值，除非API要求你向它传递null值，否则就要尽可能避免传递null值，可使用一组断言的替代方案，但最好的方法还是禁止传入null
第八章：边界
1.如果你使用类似Map这样的边界接口，就把它保留在类或近亲类中。
2.避免从公共API中返回边界接口，或将边界接口作为参数传递给公共API。
3.学习性测试的好处不只是免费，它是一种精确实验，帮助我们增进对API的理解。
4.对待第三方接口，可以像我们对象Map接口那样包装它们，也可以使用Adapter模式将我们的接口转换为第三方接口。
第九章：单元测试
1.测试与生产代码一起编写，测试只比生产代码早写几秒钟。
2.测试代码与生产代码一样重要。
3.正是单元测试让你的代码可扩展、可维护、可复用。
4.整洁的测试可读性很重要，甚至比生产中代码还要重要，要做到明确，简洁，有足够的表达力。
5.每个测试都清晰的拆分为三个环节，构造、操作、检验。
6.每个测试都应该有且只有一个断言。
7.整洁的测试应该遵循以下五条规则：快速、独立、可重复、自足验证、及时。
第十章：类
1.类中如果有公共静态变量，应该先出现。然后是私有静态变量，及私有实体变量。很少会有公共变量。
2.公共函数应跟在变量列表之后。
3.类应该短小，并拥有较小的权责
4.单一权责原则(SRP)：类或模块应该有且只有一条加以修改的理由。
5.系统应该由许多短小的类而不是少量巨大的类组成。每个小类封装一个权责。只有一个修改的原因，并与小数其他类一起协同达成期望的系统目标。
6。保持高内聚性就会得到许多短小的类。
7.我们希望将系统打造成在添加或修改特性时尽可能少惹麻烦的架子。
8.在理想的系统中，我们扩展系统，而非修改现有代码来添加新特性。
9.依赖倒置原则：类应当依赖于抽象而不是依赖于具体细节。
第十一章：系统
1.将系统的构造与使用分开
2.我们可以用抽象工厂模式让应用自行控制何时创建对象，但构造的细节却隔离于应用程序代码之外。
3.分享构造与使用一种强大的机制就是依赖注入。控制反转是依赖管理中的一种应用手段。spring窗口提供了最有名的DI容器。
第十二章：迭进
1.简单设计四条规则：运行所有测试、不可重复、表达了程序员的意图、尽可能减小类和方法的数量（按重要程度排序）。
2.小规模复用可大量降低系统复杂性。
3.模板方法模式是一种移除高层级重复的通用技巧。
4.花一点点时间在每个函数和类上。选用较好的名称，将大部分函数切分为小函数。
第十三章：并发编程
1.对象是过程的抽象，线程是调度的抽象。
2.并发是一种解耦策略。它帮助我们把做什么(目的)和何时(时机)做分开。
3.并发会在性能和编写额外代码上增加一些开销。
4.正确的并发是复杂的，即便对于简单的问题也是如此。
5.并发缺陷并非总能重现，所以常被看作是偶发事件而忽略，未被当作真正的缺陷看待。
6.并发常常需要对设计策略的根本性修改。
7.建议分离并发相关代码与其它代码。
8.建议谨记数据封装；严格限制对可能被共享变量的访问。
9.避免共享数据的好方法之一就是一开始就避免共享数据。也可使用数据复本。
10.让每个线程在自己的世界中存在，不与其他线程共享数据。
11.建议尝试将数据分解到可被独立线程(可能在不同处理器上)操作的独立子集。
12.了解一些执行模型：生产者-消费者模型、读者-作者模型、宴席哲学家。
13.尽早考虑关闭问题，尽早令其正常工作。
14.测试并不能确保正确性。然而好的测试却尽可能降低风险。
15.不要将系统错误归咎于偶发事件。
16.先使非线程代码可工作，不要同时追踪非线程缺陷和线程缺陷。
17.编写可插拔，可调整的线程代码。
18.运行多于处理器数量的线程，这样就越有可能找出导致线程死锁的代码。
第十四章：逐步改进
1.要编写整洁的代码，必须先写肮脏的代码，然后再清理它。
2.毁坏程序的最好方法之一就是以改进之名大动其结构。可采用测试驱动的规程（核心原则是保持系统始终能运行）。
第十五章：JUnit内幕
1.测试用例会更有说服力。
2.模块分解成一组分析函数和一组合成函数。
3.所有的分析函数都先出现，所有的合成函数都最后出现。
4.首先让它能工作，其次让它做对。
第十七章：味道与启发
1.通常，作者、最后修改时间、SPR数等元数据不该在注释中出现。注释只应该描述有关代码和设计的技术性信息
2.过时、无关或不正确的注释就是废弃的注释。
3.如果注释描述的是某种充分自我描述了的东西，那么注释是多余的。
4.如果要编写一条注释，就花时间保证写出最好的注释。
5.看到注释掉的代码就删除它，源代码控制系统会记得它。
6.构建系统应该是单步的小操作。
7.你应当发出单个指令就可以运行全部单元测试。
8.函数的参数应该少，没参数最好。
9.输出参数违反直觉，读者期望参数用于输入而非输出。
10.布尔值参数宣告函数做了不止一件事，应该消灭掉。
11.永不被调用的函数应该丢弃。
12.理想的源文件包括且只包括一种语言。
13.关闭失败测试，告诉自己过后再处理，这和假装刷信用卡不用还钱一样坏。
14.DRY原则。(Don't Repeat Youself)
15.创建分离较高层级一般性概念与较低层级细节概念的抽象模型。
16.通过来说基类于派生类来说一无所知。
17.类中的方法越少越好，函数知道的变量越少越好。类拥有的实体变量越少越好。
18.如果你找到死代码就体面的埋葬它，将它从系统中删除掉。死代码就是不执行的代码。
19.变量和函数应该在靠近被使用的地方定义。
20.前后一致。在特定的函数中用名为response代表HttpServletResponse对象，则在其它用到HttpServletResponse对象的函数中也用同样的变量。
21.没有用到的变量，从不调用的函数，没有信息量的注释，等等这些都应该移除。
22.不互相依赖的东西不该耦合。
23.类中的方法应该对其所属类中的变量和函数感兴趣，不该垂青其他类中的变量和函数。
24.代码要尽可能具有表达力。
25.让程序可读的最有力方法之一就是将计算过程打散成在用有意义的单词命名的变量中放置的中间值。
26.函数名称应该表达其行为。
27.用多态替代if/else或switch/case
28.每个团队都应遵循基于通用行业规范的一套编码标准。
29.用命令常量替代魔术数。
30.魔术数不仅说数字。它泛指任何不能自我描述的符号。
31.坚守结构甚于约定的设计决策。
32.避免否定性条件。
33.函数只该做一件事。
34.构建代码需要理由，而且理由应该与代码结构相契合。
35.边界条件难以追踪。封闭边界条件。
36.函数中的语句应该在同一抽象层级上，该层级应该是函数所示操作的下一层。
37.在较高层级放置可配置数据。
38.通过使用通配符避免过长的导入清单。
39.不要继承常量。
40.用枚举替代常量。
41.不要太快取名。确认名称具有描述性。
42.尽可能使用标准命名法。
43.只要还有没被测试探测过的条件，或是还有没被验证过的计算，测试就还不够。
44.覆盖率工具能汇报你测试策略中的缺口。
45.小测试易于编写，其文档上的价值高于编写成本。别略过小测试。
46.被忽略的测试就是对不确定事物的疑问。
47.在某个函数中发现一个缺陷时，最好全面测试那个函数。你可能会发现缺陷不止一个。
48.测试应该快速。






































