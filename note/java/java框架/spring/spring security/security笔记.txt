221.5.109.15
Grgbanking!))(
一、使用spring security
1.创建security配置文件
 <http auto-config="true">
    <intercept-url pattern="/admin**" access="ROLE_USER" /></http>
    <authentication-manager>
        <authentication-provider>
        	<!-- 配置可以登陆的用户 -->
            <user-service>
                <user name="testuser" password="123456" authorities="ROLE_USER" />
            </user-service>
        </authentication-provider>
    </authentication-manager>
2.在web.xml中
 配置加载spring上下文类
 配置加载security配置文件
 配置过滤器DelegatingFilterProxy(从这个配置中，可能会给我们造成一个错觉，以为DelegatingFilterProxy类就是springSecurity的入口，但其实这个类位于spring-web-3.0.5.RELEASE.jar这个jar下面，说明这个类本身是和springSecurity无关。其实主要作用就是一个代理模式的应用,可以把servlet 容器中的filter同spring容器中的bean关联起来。)
3.启动项目访问
   登陆: http://ip:port/projectName/j_spring_security_login
   退出: j_spring_security_logout
   校验: j_spring_security_check
4.修改默认登录页面(spring security会有一个默认的登陆校验页面)
    <!-- 自己配置登录页面。默认登录地址：j_spring_security_check -->
    <http auto-config="true">
        <intercept-url pattern="/admin**" access="ROLE_USER" />
        <form-login login-page="/login" username-parameter="username"
            password-parameter="password" authentication-failure-url="/welcome"/>
    </http>
    注：需要以上这些属性：路径为访问controller路径
5.配置用户在文件中
    <user-service id="userDetailsService" properties="classpath:user.properties"/> 
 文件内容：
 username=password,grantedAuthority[,grantedAuthority][,enabled|disabled] 
如 ：
 test=123456,ROLE_USER,ROLE_ADMIN,enabled 
6.用户配置在数据库中
	<!-- 将user-service换成如下 securityDataSource为数据源 -->
   <jdbc-user-service data-source-ref="securityDataSource"/> 
   表：
   create table users( 
      username varchar_ignorecase(50) notnullprimarykey, 
      password varchar_ignorecase(50) notnull, 
      enabled boolean notnull
   );

  create table authorities ( 
      username varchar_ignorecase(50) notnull, 
      authority varchar_ignorecase(50) notnull, 
      constraint fk_authorities_users foreignkey(username) references users(username)
  ); 
  create unique index ix_auth_username on authorities (username,authority);
 7.使用配置类的方式(等同于security配置文件)
@Configuration
@EnableWebSecurity
public class SecurityConfig extends WebSecurityConfigurerAdapter {
	@Autowired
	public void configureGlobal(AuthenticationManagerBuilder auth) throws Exception {
	  auth.inMemoryAuthentication().withUser("yiibai").password("123456").roles("USER");
	  auth.inMemoryAuthentication().withUser("admin").password("123456").roles("ADMIN");
	  auth.inMemoryAuthentication().withUser("dba").password("123456").roles("DBA");
	}
	@Override
	protected void configure(HttpSecurity http) throws Exception {

	  http.authorizeRequests()
		  .antMatchers("/admin/**").access("hasRole('ROLE_ADMIN')")
		  .antMatchers("/dba/**").access("hasRole('ROLE_ADMIN') or hasRole('ROLE_DBA')")
		  .and().formLogin();		
	}
}
8.使用自定义logout
 @RequestMapping(value="/logout", method = RequestMethod.GET)
 public String logoutPage (HttpServletRequest request, HttpServletResponse response) {
     Authentication auth = SecurityContextHolder.getContext().getAuthentication ();
     if (auth != null) {
         new SecurityC ontextLogoutHandler().logout(request, response, auth);
     }
     return "redirect:logout";//You can redirect wherever you want, but generally it's a good practice to show login screen again.
 }
9.根据用户角色显示或隐藏内容
<%@ taglib prefix="sec" uri="http://www.springframework.org/security/tags"%>
<sec:authorize access="hasRole('ADMIN') and hasRole('DBA')">
	do something...
</sec:authorize>
10.获取用户角色
	定义一个类继承SimpleUrlAuthenticationSuccessHandler，重写handle方法
	protected void handle(HttpServletRequest request, HttpServletResponse response, Authentication authentication){
		Collection<? extends GrantedAuthority> authorities = authentication.getAuthorities();
		for (GrantedAuthority a : authorities) {
			String role = a.getAuthority();//ROLE_USER,ROLE_ADMIN,ROLE_DBA
		}
	}
11.外部猎取数据实质，设置给UserDetails
  实现：实现UserDetailsService实现其loadUserByUsername方法
  public class CustomUserDetailsService implements UserDetailsService{
	@Transactional(readOnly=true)
	public UserDetails loadUserByUsername(String ssoId)
			throws UsernameNotFoundException {
		User user = ...;
		return new org.springframework.security.core.userdetails.User(user.getSsoId(), user.getPassword(), user.getState().equals("Active"), true, true, true, 
		List<GrantedAuthority>);
	}
	//GrantedAuthority rity = new SimpleGrantedAuthority("ROLE_"+userProfile.getType());
12.对密码进行加密
 spring security使用BCryptPasswordEncoder对密码进行加密
13.验证用户是否登录
Authentication auth = SecurityContextHolder.getContext().getAuthentication();
if( auth!= null && auth.isAuthenticated() &&
        !(auth instanceof AnonymousAuthenticationToken)){
    System.out.println("success");
}else{
    System.out.println("error");
}
注：未登录auth类型为AnonymousAuthenticationToken，其name为anonymousUser
14.防止多个用户同时登陆一个账号
在http中添加如下：
<session-management>
    <concurrency-control max-sessions="1" error-if-maximum-exceeded="false" />
</session-management>
15.理顺下拦截请求，登录验证等操作
1.写一个类实现UserDetailsService接口，实现其loadUserByUsername方法，返回一个User对象就可以了。具体数据需要自己实现(配置文件取或数据库取都可以)，通过UserDetailService拿到用户信息后，authenticationManager对比用户的密码（即验证用户），然后这个AuthenticationProcessingFilter拦截器就过咯。
2. 写一个类继承 AbstractSecurityInterceptor 实现 javax.servlet.Filter
在实现的doFilter方法中调用
FilterInvocation fi = new FilterInvocation(request, response, chain);   
InterceptorStatusToken token = super.beforeInvocation(fi);   
每次访问资源都会被这个拦截器拦截，会执行doFilter这个方法，其中fi断点显示是一个url（可能重写了toString方法吧，但是里面还有一些方法的），最重要的是beforeInvocation这个方法，它首先会调用FilterInvocationSecurityMetadataSource类（第三步需要实现的）的getAttributes方法获取被拦截url所需的权限，再调用AccessDecisionManager类(第四步实现)decide方法判断用户是否够权限。
3.写一个类实现FilterInvocationSecurityMetadataSource
//参数是要访问的url，返回这个url对于的所有权限（或角色）  
public Collection<ConfigAttribute> getAttributes(Object object) throws IllegalArgumentException {   
    // 将参数转为url      
    String url = ((FilterInvocation)object).getRequestUrl();     
    Iterator<String>ite = resourceMap.keySet().iterator();   
    while (ite.hasNext()) {           
        String resURL = ite.next();    
        if (pathMatcher.match((String)path, url)) {   
            return getAuth(resURL);//获取权限，自己实现           
            }         
        }   
    return null;      
    }  
4.写一个类实现AccessDecisionManager，实现其decide方法,在过滤器之后会调用
	//检查用户是否够权限访问资源  
    //参数authentication是从spring的全局缓存SecurityContextHolder中拿到的，里面是用户的权限信息  
    //参数object是url  
    //参数configAttributes所需的权限  
    public void decide(Authentication authentication, Object object,      
            Collection<ConfigAttribute> configAttributes)   
                    throws AccessDeniedException, InsufficientAuthenticationException {  
        if(configAttributes == null){   
            return;         
        }    
 
        Iterator<ConfigAttribute> ite=configAttributes.iterator();  
        while(ite.hasNext()){  
            ConfigAttribute ca=ite.next();    
            String needRole=((SecurityConfig)ca).getAttribute();  
            for(GrantedAuthority ga : authentication.getAuthorities()){   
                if(needRole.equals(ga.getAuthority())){    
                    return;
	            }
	        }                   
        } 
        //注意：执行这里，后台是会抛异常的，但是界面会跳转到所配的access-denied-page页面  
        throw new AccessDeniedException("no right");                
    }
decide方法里面写的就是授权策略了，上面的实现是，没有明说需要权限的（即没有对应的权限的资源），可以访问，用户具有其中一个或多个以上的权限的可以访问。这个就看需求了，需要什么策略，可以自己写其中的策略逻辑。通过就返回，不通过抛异常就行了，spring security会自动跳到权限不足页面（配置文件上配的）。         