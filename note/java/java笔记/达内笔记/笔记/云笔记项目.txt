做项目:
	选型
	实施
多思考,多动手,多自学.
多总结.
==========================================
用在哪,主要有什么功能,用到什么技术...
1.项目简介
	云笔记系统
	笔记本管理,笔记管理,回收站管理,
	分享和收藏管理,活动管理等.
2.采用哪些技术体系(web)
	tomcat(web服务器)
	springmvc(请求接收和分发处理)
	springIOC,AOP(管理对象及其关系,解耦)
	jquery(js框架,简化js开发)
	fckeditor(js编辑器)
	run_prettify(代码高亮显示)
	ibatis(MyBatis,数据库操作)
	mysql(数据库服务器)
	
a.所有界面采用HTML(响应速度快)
b.所有请求都采用Ajax(局部更新)
c.所有请求服务器采用json
在Controller方法前添加

set names utf8
source sql /路径
use cloud_note　使用数据库
show tables 显示表

3.登录功能的实现
	a.了解需求和数据库
		--熟悉相关数据表
		--熟悉功能需求
		(用户输入用户名的密码,然后点击登录按钮,服务器检查正确性,正确进入,edit.html;
		错误在log_in.html提示错误信息)
	b.详细设计和分析
	/user/login.do(携带用户名和密码)
	-->DispatcherServlet
	-->UserLoginController.execute
	-->UserService.checkLogin()
	-->UserDao-->cn_user表(查)
	-->返回json处理结果
	
	沪江开心词
	请求携带用户名和密码
	
	
	１.mysql -uroot 
	２.每天走的时候电脑要正常关机
	３.编码问题
	create database XX default character set utf8(建表时就规定默认字符集,这么做乱码问题肯定不是出现在数据库中)
	4.use XX x使用某个数据库　(之后才能进行对表的操作,对数据库的操作要在使用数据库之前)
	5.jdbc
		1)url修改为::
			jdbc:mysql://localhost:3306/数据库名?useUnicode=true&characterEncoding=utf8
			(若在配置文件的字符串中,&符号要转译为&amp)
		2)oracle的驱动包改为mysql.jdbc.Driver(同寻找oracle的driver相同,可以在mysql的驱动包中找到)
		2)用户名为root 密码不填
		
统一服务器返回json格式
{
	status:状态
	nsg:消息
	data:数据
}




Spring 事务(基于AOP)
	try{conn.setAutoCommit(false)
		insert;
		update;
		conn.commit();
	}catch(){
		conn.rollback();
	}
	
	try{conn.setAutoCommit(false)
		图片路径存入数据库
		图片文件保存到本地磁盘
		conn.commit();
	}catch(){
		conn.rollback();
	}

	c.Spring如何控制事务
	通过配置方式控制事务
	(声名式事务管理)
	在spring配置文件声明定义
	DataSourceTransactionManager
	开启事务注解配置
	<tx:annotation-driven/>
	在目标组件类前或方法前添加
	@Transactional注解
	
	<!-- 遇到哪些方法进行事务管理-->
	<tx:advice id="txAdvice"
		transaction-manager="tx">
		<tx:attributes>
			<tx:method name="load" read-only="true"/>
			<tx:method name="create"/>
			<tx:method name="update*"/>
		</tx:attributes>
	</tx:advice>
	
	xml:只需要xml配置,复杂度高,使用复杂,控制不灵活
	注解:需要xml 和注解结合配置,简单方便,控制灵活
	
	d.事务属性控制
		readOnly:可读写特性
		默认可读可写
		rollbackFor/noRollbackFor:是否回滚
		默认运行时异常回滚;检查异常不回滚
		propagation:事务传播
		默认类型是required
		isolation:事务隔离级别
		默认是default,采用数据库默认级别
<!--指定tx作用在哪些组件上-->
	<aop:config>
		<aop:pointcut id="targetpoint"
			expression="within(org.tarena.note.service..*)">
	</aop:config>	
	
Spring AOP应用
	事务管理组件T-->NoteService.create
	try{
		//取消自动提交
		//调用目标组件方法
		//提交事务
	}catch(){
		//回滚事务
	}
================================================
1)AOP概念.为什么使用
	Aspect Oriented Programming
	面向方面/切面编程
	
将共通处理逻辑从传统业务逻辑中剥离出来,形成独立的组件,然后以配置方式结合,	这样可以将共通处理和传统的业务处理解耦.

好处:解耦,重复利用,配置关系灵活

比如事务管理,权限控制,日志跟踪,异常记录等功能都适合采用AOP处理
	OOP :Object Oriented Programming 
	面向对象编程
	
2)AOP的使用方法
	分析需求,找出以下3个关键点
	1.切面(Aspect)
		切面是封装共通业务,可以动态作用到其它目标组件方法上
	2.切入点(Pointcut)
		用于指定哪些组件是目标;在Spring中用一个表达式指定切入点.
	3.通知(Advice)
		通知是指切面功能切入目标组件方法的时机.
		try{
			前置通知-->调用切面组件处理
			环绕通知前置部分
			执行目标组件方法
			环绕通知后置部分
			后置通知-->调用切面组件处理
		}catch(){
			异常通知-->调用切面组件处理
		}finally{
			最终通知-->调用切面组件处理
		}
		环绕通知-->等价于前置+后置
		@Before
		<aop:before>
		@AfterReturning
		<aop:after-returning>
		@AfterThrowing
		<aop:after-throwing>
		@After
		<aop:after>
		@Around
		<aop:around>
例:为所有Service组件追加事务管理功能
	事务管理-->切面
	所有Service-->目标-->用切入点表达式
	通知-->开始+结束+抛异常
	切面:实现跟踪操作
	切入点:MyService方法
	通知:在执行MyService方法前插入功能
	
	//调用切面方法-->前置通知
	<aop:before>
	//执行目标
	-------方法限定表达式----------
	execution(修饰符? 返回类型 方法名(参数列表) 抛出异常?)
	返回类型可以是:*;void;具体类型
	方法名:f1;load*;org.service.MyService.f1
	参数列表:(..)表示0到多个参数不能是1或3个点	
	execution(* f1(..))
	//匹配容器中组件以add开头的所有方法
	execution(* add*(..))
	//匹配MyService所有方法
	execution(* service.MyService.*(..))
	//匹配service包下所有组件所有方法
	execution(* service.*.*(..))
	//匹配service包及子包中所有组件所有方法
	execution(* service..*.*(..))
	-------类型限定表达式----------
	
	within(组件类型)
	//匹配MyService所有方法
	within(service.MyService)
	//匹配service包下所有组件方法
	within(service.*)
	//匹配service包及子包所有组件所有方法
	within(service..*)
	---------Bean名称限定表达式-------------
	bean(Bean组件id名)
	//匹配容器中id为mysrvice的所有方法
	bean("myservice")
	//匹配id以Service结尾的所有组件所有方法
	bean("*Service")
	
------------------------------------------------------------------------------------	
1.Spring事务管理使用方法
	编程式事务管理(Java)
	声明式事务管理(配置)
	a.注解配置应用
		定义一个DataSourceTransactionManager
		开启事务注解@Transactional
		<tx:annotation-driven transaction-manager="xx"/>
	
	文件等非RuntimeExcpeiton异常处理方式
	1.	@Transactional(rollbackFor={IOException.class}(声明非运行时异常)
	2.将代码用try-catch处理抛出自定义的RuntimeException
	
	事务异常处理
	事务传播
	事务隔离(并发时会用到 )

2.Spring AOP使用
面向方面编程
解决:共通业务与普通业务隔离,将共通业务封装成独立组件,然后用配置方式作用到普通业务组件方法上.

a.通知(决定在哪个位置切入)
b.方面(要切入的功能)
c.切入点(要切哪些组件)

============================================
1.要求:等程序出异常后,将异常信息写和日志文件
通知:发生异常时执行(异常通知)
@AfterThrowing
方面:将异常对象写入文件
切入点:往Controller方法切入
@within(org.tarena.note.web.controller..*)

+++++++++++++++++++++++++++++++++++++++++++++++++++++++
MyBatis动态SQL
<if test="">xxx</fi>
<choose>
	<when test=""></when>
	<otherwith test=""></otherwith>
</choose>


===========================================================
MyBatis关联映射
将有关系的表的数据映射成对象关系.

cn_notebook 笔记本表
cn_note 笔记表

cn_note.cn_notebook_id = cn_notebook_id.cn_notebook_id

NoteBook.notes-->Note对象
Note.book-->NoteBook对象

Note note = noteDao.findBy*d(xxx);
bookDao.findById(note.getCn_notebook_id());

Note note = noteDao.findById(xxx);
NoteBook book = note.getBook();

笔记ID 笔记标题 创建时间  所属笔记本名

select * from cn_note join cn_notebook on(xxx)

对象关联属性映射 Note.book NoteBook
与主对象一起加载
单独发送一个SQL加载
集合关联属性映射
