RPC
1.什么是 RPC?
	RPC (Remote Procedure Call)即远程过程调用，是分布式系统常见的一种通信方法.
2.除 RPC 之外，常见的多系统数据交互方案还有分布式消息队列、HTTP 请求调用、数据库和分布式缓存等。
	其中 RPC 和 HTTP 调用是没有经过中间件的，它们是端到端系统的直接数据交互。
	RPC 是指长连接数据交互，而 HTTP 一般是指即用即走的短链接.
3.消息接收端如何知道发送端发送了多少数据
	1.特殊分隔符法
		最为常见的分割符是\r\n，当接收端遍历字节数组时发现了\r\n，就立即可以断定\r\n 之前的字节数组是一条完整的消息
		HTTP 和 Redis 协议就大量使用了\r\n 分割符。此种消息一般要求消息体的内容是文本消息。
		优：可以直接看到消息的文本内容。
		缺：不适合传递二进制消息，因为二进制的字节数组里面很容易就冒出连续的两个字节内容正好就是\r\n 分割符的 ascii 值。
	2.长度前缀法
		消息发送端在每条消息的开头增加一个 4 字节长度的整数值，标记消息体的长度。这样消息接受者首先读取到长度信息，
		然后再读取相应长度的字节数组就可以将一个完整的消息分离出来。此种消息比较常用于二进制消息。
		优：适用于二进制协议，对传递的内容本身没有特殊限制，文本和内容届可以传输，不需要进行特殊处理
		缺：可读性很差
	3.HTTP	
		HTTP 的消息头采用的是纯文本外加\r\n 分割符。
		消息体则是通过消息头中的 Content-Type 的值来决定长度
4.消息的结构
	有些消息协议的结构信息是显式的，还有些是隐式的。
	比如 json 消息，它的结构就可以直接通过它的内容体现出来，所以它是一种显式结构的消息协议。
	Json优：可读性非常棒
	Json缺：有太多的冗余信息。每个字符串都使用双引号来界定边界，key/value 之间必须有冒号分割，对象之间必须使用大括号分割等等。
		这些还只是冗余的小头，最大的冗余还在于连续的多条 json 消息即使结构完全一样，仅仅只是 value 的值不一样，也需要发送同样的 key 字符串信息。
	隐式的消息的优点就在于节省传输流量，它完全不需要传输结构信息。
5.消息压缩
	进行消息压缩可以减轻网络带宽压力，但是这同时也会加重 CPU 的负担，因为压缩算法是 CPU 计算密集型操作，会导致操作系统的负载加重。
	常用压缩算法包： Google 的 snappy 算法
	varint编码：
		数值非常小时，只需要使用一个字节来存储，数值稍微大一点可以使用 2 个字节，再大一点就是 3 个字节，它还可以超过 4 个字节用来表达长整形数字。
		原理：保留每个字节的最高位的 bit 来标识是否后面还有字节，1 表示还有字节需要继续读，0 表示到读到当前字节就结束。如果是负数怎么办？
	 zigzag 编码：(专门用来解决负数问题)
		zigzag 将负数编码成正奇数，正数编码成偶数。解码的时候遇到偶数直接除 2 就是原值，遇到奇数就加 1 除 2 再取负就是原值。
		0 => 0
		-1 => 1
		1 => 2
		-2 => 3
		2 => 4
		-3 => 5
		3 => 6
6.Redis 文本协议结构
	1.Redis 作者 Antirez 为 Redis 设计了一套专用的文本通讯协议 RESP(Redis 序列化协议 Redis Serialization Protocol )。
	2.Redis 协议将传输的结构数据分为 5 种最小单元类型，单元结束时统一加上回车换行符号\r\n。
		1.单行字符串 以+符号开头；
		2.多行字符串 以$符号开头，后跟字符串长度；
		3.整数值 以:符号开头，后跟整数的字符串形式；
		4.错误消息 以-符号开头；
		5.数组 以*号开头，后跟数组的长度；
7.Protobuf 协议
	Google 开源的二进制 RPC 通讯协议，它可能是互联网开源项目中使用最为广泛的 RPC 协议。