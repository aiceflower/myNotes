一、变量
v = 'hello world!'
二、字符串
	1.一系列被引号括起来的字符。引号可以是单引号 ''，双引号 ""，三引号 """|'''
	2. 	v.title() 首字母大写
		v.upper() 大写
		v.lower() 小写
		v.lstrip() 删除左空白
		v.rstrip() 删除右空白
		v.strip() 删除左右空白
		字符串相加 用 + 号
	3.多行字符串 
		用''' 或""" 包括 可 在行尾加 \
	4.操作字符串
		sequence类型都支持的一些通用操作:
			成员检查:
				in、not in  
			连接：
				+
			复制：
				*   str * 2 
			下标取值：
				str[3]
			取长度：
				len(s)
			取最大：
				max(s)
			取最小：
				min(s)
			切片：
				s[start:end:step]
		查找替换操作：
			计算个数：
				str.count('a',start,end)
			查找第一次出现的位置：
				str.find(sub,begin,end)
				str.rfind(sub,begin,end)
				str.index(sub,begin,end)
				str.index(sub,begin,end)
				index找不到报错，find找不到返回-1
			替换：
				str.replace(old, new[, count]) count指定替换次数，不指定全部替换
		判断：
			str.endswith(suffix, start, end)
			str.startswith(suffix, start, end)
			str.isalnum()  #检测字符串是否由字母和数字组成，空串为False
			str.isspace() #判断是否只由空白串组成，空串为False
			str.islower() #是否全小写 
			str.isupper() #是否全大写
			str.istitle() #是否首字母大写
		格式化类操作，返回一个格式化的新串：
			str.lower()    
			str.upper()     
			str.swapcase() #大小写互换
			str.capitalize() #第一个字符转换为大写，其它全转换为
			str.title() #首字母大写
			str.center(width, fillchar) #字符串在指定长度中居中，两边填充fillchar
			str.ljust(width, fillchar) #居左
			str.rjust(width, fillchar) #居右
			str.lstrip([chars])     #去左边的chars，默认去空格
			str.rstrip([chars])     #去右
			str.strip([chars])		#去两边
			str_result = '{0},{1}'.format('Alan', 'Xu')  格式化，{}中可以是位置，关键字，对象属性，列表下标
			str_result = '{:d}'.format(26)    #将数字转换为指定进制，b、d、o、x分别是二进制、十进制、八进制、十六进制，逗号可以做金额的千位分隔符。
			str.split(reg) 拆
			delimiter.join(target) 把delimiter加入到target的每个元素中，target可以是字符串可以是列表。
三、数字
	3 ** 2 乘方
	0.1 + 0.2  数字不精确
	数字与字符串相加，报错，用 str()函数包含数字
四、注释
	单行 #
	多行 ''' 或 """
五、列表
	1.列表用[] 来表示,列表中的元素可是不同类型
		li = ['a',1]
	2.访问
		li[0] 访问互一个
		li[-1] 访问倒数第一个
	3.修改
		li[0] = 'b'
	4.添加
		li.append('b') #添加一个
		li.insert(1,'c') #指定位置添加
		li.extend(['d','e']) #添加多个
	5.删除 
		del li[1] 知道索引
		li.pop() 删除列表最后一个元素，返回该元素，不知道索引
		li.remove('a') 知道元素不知道索引只删除第一个
		while "a" in li: #删除所有的a
			pets.remove("a")
	6.排序
		li.sort() 永久排序，原子操作
		sorted(li) 临时排序
		li.sort(reverse=True) 反向排序
		sorted(li, reverse=True) 反向排序
	7.反转
		li.reverse()
	8.长度
		len(li)	
	9.遍历列表
		for i in li:
			print(i)
	10.创建数值列表
		1.
			range() 生成数列
			list() 转成列表
			numL = list(range(5))
		2.
			squares = [value ** 2 for value in range(1, 11)]
		3.
			squares_2 = [value ** 2 for value in range(1, 11) if value % 2 == 0]
	11.数字列表统计计算
		min(li), max(li), sum(li)
	12.切片
		[起始：结束：步长]
		li[0:2]
		li[-3:]
		li[:2:2]
		如果步长为正数，则起始位置要在结束位置的左边；若步长为负数，则起始位置要在结束位置的右边。
	13.复制
		1.浅复制
			name1 = ['a','b','c','d']
			name2 = name1  #只复制地址，再修改同步
		2.深复制
			name1 = ['a','b','c','d']
			name2 = name1[:] #复制元素，再修改不同步
	14.去除重复元素
		l1 = ['b','c','d','b','c','a','a'] 
		l2 = list(set(l1))  或 l2 = {}.fromkeys(l1).keys() 
		l2.sort(key=l1.index)  #这一步保证元素顺序不发生变化
六、元组Tuple
	1.元组用圆括号来标识()
		one_tuple = (1,) # 声明含有一个元素的元组。不是one_tuple = (1)
	2.元组中的变量不可以被改变，但元组中的指针可以被改变
七、字典
	1.字典是一系列键值对。用花括号{}来表示。
	2.定义
		alien = {"color": "green", "points": 5}  # 定义非空字典的语法
		alien = {}  # 定义空字典的语法
	3.改
		alien["color"] = "yellow"
	4.删 
		del alien["color"]
	5.遍历
		1)遍历键值
			for key, value in alien.items():
				...
		2)遍历key
			for name in alien.keys():
				...
			for name in alien:
				print(name.title())
			for name in sorted(alien.keys()): #按顺序遍历key
				print(name.title())
		3)遍历值
			for v in alien.values(): #默认不去重
				print(v.title())
			for v in set(alien.values()): #用set可去重
				print(v.title())
	6.判断key是否在字典中
		if "collor" not in alien.keys():
			...
	7.嵌套
		字典中可以存列表，字典。列表中也可以存字典，列表。
八、输入
	1.使用input()函数获取用户输入，input()的返回值为字符串。如果输入的是数字，并且要用于后续计算，需要进行类型转换。
	2.判断数据类型
		number = input() #input可传入提示字符
		type(number)  #法一
		isinstance(number, str) #法二
	3.类型转换
		int(number) #转数字
		str(number) #转字符串
	4.判断奇偶
		if number % 2:
			...
九、函数
	1.定义
		def function_name():
			do something...
	2.调用
		function_name() #调用函数前，必须先定义函数！
	3.空函数
		def do_nothing(): #让程序能跑起来，但暂时又不写这个函数
			pass
	4.位置参数（必选参数）
		要求实参的顺序和形参的顺序相同。
	5.关键字参数（传实参时）
		用键值对的方式传递实参,不用在意实参的位置
	6.默认参数（定义函数时，形参）
		定义函数的时候给出了默认值，在调用函数时可以省略相应的实参。如果给形参提供了实参，Python将使用指定的实参。
		默认参数必须指向不变对象，否则多次调用且不传参时可能会出错。解决如下：
		def add_end(temp=None):
			if temp is None:
				temp = []
				temp.append("end")
				return temp
		print(add_end())
		print(add_end())
	7.返回值
		返回单个值，返回列表，返回多个值(返回Tuple)
		返回多个值，但有些值不想要，则这些位置的值可以用下划线_进行接收。
		def return_mult():
			return 1, 2, 3
    
		a, _, _ = return_mult()
	8.禁止函数修改列表：
		但有时我们并不希望这个列表被清空，而是留作备案。
		print_models(unprinted_designs[:], completed_models) #不用改变函数定义，在函数调用时使用切片操作
	9.传递任意数量的参数  #如果要让函数接收不同类型的参数，必须将可变参数放在最后
		def make_pizza(*toppings): #Python将传值封装成了一个元组
			print(toppings)
		make_pizza("mushrooms", "green peppers", "extra cheese") #传入多个参数
		
		toppings = ["mushrooms", "green peppers", "extra cheese"] #将传入多个参数改为传入一个参数
		make_pizza(*toppings)    # 这里是在执行函数，而不是在定义函数！ 如果不加*则相当于传入了一个list,还是一个参数
	10.使用任意数量的关键字参数（**kw）
		def build_profile(first, last, **user_info):
			print(user_info)
			profile = {}
			profile["first_name"] = first
			profile["last_name"] = last
			for key, value in user_info.items(): #Python将任意关键字参数封装成一个字典
				profile[key] = value
			return profile
	11.区分—命名关键字参数（也叫命名参数）：
		限制传入的关键字参数，如下first, last必选，必须且只能传入age和country这两个参数（一个不多，一个不少）时，则需要用到命名关键字参数，它使用一个星号分隔必选参数和命名关键字参数。
		def build_profile(first, last, *, age, country="China"): #这里的age，country必须显示给出，否则报错
			...
		build_profile("albert", "einstein", country="USA", age=20) #正常
		build_profile("albert", "einstein", age=20) #正常
		build_profile("albert", "einstein") #报错
	12.五种参数可以同时混用，但是必须遵照如下顺序：
		（从左到右）必选参数、默认参数、可变参数、命名关键字参数和关键字参数**。
	13.实参中在参数前面加*或**
		当对象为迭代器时，可在实参中使用*；当对象为一个可迭代的映射时，可在实参中使用**
		实参中的*会获取可迭代对象的 key（索引/键值）
		实参中的**会获取可迭代映射的 value
十、模块
	1.在python中，一个.py文件就是一个模块。
	2.导入
		1)导入整个模块，多个用逗号隔开
			import module_name
			module_name.function_name() #调用
		2)导入某模块中特定的函数，多个用逗号隔开
			from module_name import function_name
			function_name() #调用
		3)别名,函数名发生冲突，或者函数名、模块名太长时可起别名
			import pizza as p
			from pizza import make_pizza as mp
		4)导入模块中的所有函数 
			from pizza import *  #不推荐，可能与自己的变量重名，导致出错
	3.包
		Python中的包就是一个文件夹，但这个文件夹下面必须包含名为__init__.py的文件。包中可以放多个模块。
十一、类
	1.创建类
		class Car: 或 class Car():
	2.每一个类必有一个__init()__方法，这个方法被称为构造方法
	3.Python中self参数是类中每个非静态方法必须要有的形参，且必须放在第一个
	4.类中的每个属性都必须有初始值，哪怕这个值是0，空字符串或者None。
	5.继承
		class ElectricCar(Car): #python支持多继承
			...
	6.访问限制
		在方法或属性前面加两个下划线使其私有。
		def __init__(self, name):
			self.__name = name
		实际上还是可以通过 obj._className__atrrName来访问，Python解释器只是将__name换了个名称而已。不同版本的Python解释器会将这样的属性改成不同的名字。
	7.子类可以被看成是父类的类型，但父类不能被看成是子类的类型。
	8.获取对象的所有属性和方法
		dir(obj)
	9.特殊方法
		__str__ 相当于java中的toString方法
		__slots__ 限定动态添加属性的名称
		__len__()  len(obj)实际上调用的是obj的__len__()方法，如果想用len(my_obj) 需要在my_obj中实现__len__方法
		__iter__，__next__ 前者让对象可以作用于 for ...in ,后者用于取得下一个元素
		__getitem__ ，让其可以像list一样通过下标取元素 list[1]
		getattr(obj,'x') #获取属性x
		setattr(obj,'x') #设置一个属性x
		hasattr(obj,'x') 判断是否有x属性
		只有在不知道对象信息的时候，我们才会去获取对象信息,知道的时候直接用
	10.给类添加属性方法【python为动态语言，可以动态的给类，对象添加属性和方法】
		添加属性：
			s = Student()
			s.name = "new Add"
		添加方法：
			def set_name(self,name):
				self.name = name
			Student.set_name = set_name #给类添加方法后，所有对象都可调用，如果给对象添加，只能当前对象使用。
		限制添加:
			如：只允许对Student实例添加name和age属性。
			class Student(object):
				__slots__ = ('name', 'age') # 用tuple定义允许绑定的属性名称
			__slots__定义的属性仅对当前类实例起作用，对继承的子类是不起作用的：
	11.枚举
		Month = Enum('Month', ('Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'))
十二、文件(读文本r,写文本w,追加a,读二进制rb,写二进制wb)
	1.读文件
		with open("pi_digits.txt", "r") as file_object: #使用with保证出现异常时也能关闭资源
			contents = file_object.read()   # 一次性读取整个文件
			print(contents)
	2.逐行读取
		with open(file_name) as file_pi:
			for line in file_pi:  # 也可以通过while循环配合readline()方法逐行读取文件
			print(line)  #rstrip()方法去掉末尾的空字符
	3.将文件每一行放入列表中
		readlines()方法将文件中每一行存入列表并返回
	4.写入文件
		with open(filename, "w") as file_obj:
			file_obj.write("I love python!") #write()函数不会在文件末尾添加换行符，如果需要换行符，请自行添加。
	5.json存取数据
		json.load(file) #取数据
		json.dump(content,file) #存数据
		json_str = json.dumps(content,default=student2dict)) #对象转换为json字符串，如果是自定义对象需要一个转换函数,或者传通用的default=lambda obj: obj.__dict__
			class Student:
				def __init__(self,name,age):
					self.name = name 
					self.age = age
			def student2dict(std):
				return {
					'name': std.name,
					'age': std.age,
				}   
		json.loads(json_str, object_hook=dict2student) #json字符串转对象，如果是自定义对象需要勾子
			def dict2student(d):
				return Student(d['name'], d['age'], d['score'])
	6.StringIO和BytesIO是在内存中操作str和bytes的方法，使得和读写文件具有一致的接口。
	7.操作文件和目录
		1.操作文件和目录的函数一部分放在os模块中，一部分放在os.path模块中，这一点要注意一下。
		2.查看当前目录的绝对路径:
			os.path.abspath('.')
		3.在某个目录下创建一个新目录:
			os.path.join('/Users/michael', 'testdir') #先把新目录的完整路径表示出来。
			os.mkdir('/Users/michael/testdir') #然后创建一个目录
		4.删除
			os.rmdir('/Users/michael/testdir')
		5.路径合成与拆分
			路径合成用os.path.join可以正确处理不同操作系统的路径分隔符。
			路径拆分用os.path.split()
		6.获取文件扩展名
			os.path.splitext()
		7.这些合并、拆分路径的函数并不要求目录和文件要真实存在，它们只对字符串进行操作。
		8.重命名文件
			os.rename('test.txt', 'test.py')
		9.删除文件
			os.remove('test.py')
		10.其它
			os.listdir('.')  列出当前目录
			os.path.isdir(x) 判断是否是目录
			os.path.isfile(x) 判断是否是文件
		11.要列出所有的.py文件，也只需一行代码：
			[x for x in os.listdir('.') if os.path.isfile(x) and os.path.splitext(x)[1]=='.py']
		12.复制文件
			shutil模块可以复制文件
		13.序列化(python中称为pickling使用pickle模块)
			1.序列化
				d = dict(name='Bob', age=20, score=88)
				pickle.dumps(d,f) #f为文件，如果传了，直接写入到文件
			2.反序列化
				d = pickle.load(f)
			
十三、异常
	1.使用try-except代码块自行处理异常。except后跟需要捕捉的异常类型，如果想捕获所有的异常，则except后面不指定异常类型。
	2.else代码块
		try-except代码块还可以和else语句组合形成try-except-else代码块。表示如果捕获了异常，这执行except中的程序，没有发生异常则执行else中的程序。
	3.使用raise 抛出指定异常
	4.自定义的异常类必须是Exception或者Error的子类
十四、单元测试
	1.导入unittest模块
	2.写一个测试用例类继承unittest.TestCase
	3.写单元测试方法，以test_开头
	4.用unittest.main()来运行这个文件中的所有测试,另一种在命令行运行单元测试  python -m unittest my_test,这种方式测试类中全部单元测试
	5.self.assertEqual(a, b) 断言真
	6.setUp()与tearDown()
		这两个方法会分别在每调用一个测试方法的前后分别被执行。
	7.测试指定单元测试
		suite = unittest.TestSuite()
		suite.addTest(MyTest("my_test_func_name")) #这种方式方法名可不用test_打头
		# 执行测试
		runner = unittest.TextTestRunner()
		runner.run(suite)
十五、高级函数
	map(f,l):
		传入两个参数，第一个f，是一个接收一个参数的函数，第二个是一个Iterable，map将传入的函数依次作用到序列的每个元素，并把结果作为新的Iterator返回。
		如： map(lambda x: x *x , [1,2,3]) 结果为 [1,4,9]
	reduce(f,l):
		reduce把一个函数作用在一个序列[x1, x2, x3, ...]上，这个函数f必须接收两个参数，reduce把结果继续和序列的下一个元素做累积计算，其效果就是：reduce(f, [x1, x2, x3, x4]) = f(f(f(x1, x2), x3), x4)
		如：求n个数的和，积等
	例：map和reduce联合
		digits = {'0': 0, '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9}
		def str2int(self,source): #字符器转为int '123' -> 123
			return reduce(lambda x ,y : x * 10 + y, map(lambda x : digits[x], source))
		
		def str2float(self,source): #字符串转换float '123.456' -> 123.456
			index_dot = source.index('.')
			prefix = source[:index_dot]
			suffix = source[index_dot+1:][::-1] #[::-1]作用是将字符串反转
			return self.str2int(prefix) + reduce(lambda x ,y : x * 0.1  + y, map(lambda x : digits[x], suffix)) * 0.1 
    
    filter(f,l):
		f是一个接收一个参数，并返回True或False的函数，从一个序列l中筛出符合条件的元素，其使用了惰性计算，所以只有在取filter()结果的时候，才会真正筛选并每次返回下一个筛出的元素。
	sorted(l,key=f,reverse=True) #需要按指定操作后排序，传key，需要反转传reverse=True
		key指定的函数将作用于list的每一个元素上，并根据key函数返回的结果进行排序。
		如：sorted([36, 5, -12, 9, -21], key=abs) 根据绝对值大小排序
	返回函数：
		def lazy_sum(*args):
			def sum():
				ax = 0
				for n in args:
					ax = ax + n
				return ax
			return sum #返回求和函数num
		f = lazy_sum(1, 3, 5, 7, 9) #这里不执行求和操作
		f()	#这里才开始执行求和操作
		当lazy_sum返回函数sum时，相关参数和变量都保存在返回的函数中，这种称为“闭包
		返回闭包时牢记一点：返回函数不要引用任何循环变量，或者后续会发生变化的变量。否则所有调用返回函数时，循环变量中的值是最终值。用如下方式解决【返回函数中再定义一个函数，无论该循环变量后续如何更改，已绑定到函数参数的值不变】：
		def count():
			def f(j):
				def g():
					return j*j
				return g
			fs = []
			for i in range(1, 4):
				fs.append(f(i)) # f(i)立刻被执行，因此i的当前值被传入f()
			return fs
	匿名函数：
		匿名函数lambda x: x * x，关键字lambda表示匿名函数，冒号前面的x表示函数参数。匿名函数有个限制，就是只能有一个表达式，不用写return，返回值就是该表达式的结果。
	装饰器：
		在代码运行期间动态增加功能的方式，称之为“装饰器”
		打印日志的例子
		def log(func):
			@functools.wraps(func)
			def wrapper(*args, **kw):
				print('call %s():' % func.__name__)
				return func(*args, **kw)
			return wrapper
		在需要打印日志的函数上加 @log
	偏函数：
		functools.partial就是帮助我们创建一个偏函数的。
		简单总结functools.partial的作用就是，把一个函数的某些参数给固定住（也就是设置默认值），返回一个新的函数，调用这个新函数会更简单。
		int2 = functools.partial(int, base=2) 固定int转二进制字符串为数字 int2('1000000')
十六、进程与线程
	多进程：
		1.跨平台多进程模块multiprocessing 
		2.创建子进程并执行
			from multiprocessing import Process
			p = Process(target=execute_func, args=('test',)) target 待执行的函数，args函数的参数
			p.start() 执行进程
			p.join() 可以等待子进程结束后再继续往下运行，通常用于进程间的同步。
		3.进程池
			from multiprocessing import Pool
			p = Pool(4)
			for i in range(5):
				p.apply_async(execute_func, args=(i,))
			p.close()
			p.join()
			对Pool对象调用join()方法会等待所有子进程执行完毕，调用join()之前必须先调用close()，调用close()之后就不能继续添加新的Process了。
		4.python中执行命令
			import subprocess
			r = subprocess.call(['nslookup', 'www.python.org']) #nslookup是linux命令
			print('Exit code:', r)
		5.子进程还需要输入
			p = subprocess.Popen(['nslookup'], stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
			output, err = p.communicate(b'set q=mx\npython.org\nexit\n')
		6.进程间通信
			Python的multiprocessing模块包装了底层的机制，提供了Queue、Pipes等多种方式来交换数据。
			from multiprocessing import Queue
			q = Queue() #创建
			q.put(value) #写
			q.get(True) #读
		7.获取cpu核数
			multiprocessing.cpu_count()
	多线程：
		1.Python的标准库提供了两个模块：_thread和threading，_thread是低级模块，threading是高级模块，对_thread进行了封装。绝大多数情况下，我们只需要使用threading这个高级模块。
		2.创建线程
			t = threading.Thread(target=execute_func, name='thread_name')
			t.start() #启动
			t.join() #
		3.获取当前线程名
			threading.current_thread().name
		4.Lock(线程间保证共享变量的安全性)
			多线程和多进程最大的不同在于，多进程中，同一个变量，各自有一份拷贝存在于每个进程中，互不影响，而多线程中，所有变量都由所有线程共享。
			lock = threading.Lock() #创建锁
			lock.acquire() #获取锁，由于锁只有一个，无论多少线程，同一时刻最多只有一个线程持有该锁，所以，不会造成修改的冲突。
			try:
				change_money(k) # 放心地改
			finally:
				lock.release()  # 改完了一定要释放锁:
		5.python中无法真正实现多线程
			因为Python的线程虽然是真正的线程，但解释器执行代码时，有一个GIL锁：Global Interpreter Lock，任何Python线程执行前，必须先获得GIL锁，
			然后，每执行100条字节码，解释器就自动释放GIL锁，让别的线程有机会执行。
			这个GIL全局锁实际上把所有线程的执行代码都给上了锁，所以，多线程在Python中只能交替执行，即使100个线程跑在100核CPU上，也只能用到1个核。
			
			所以，在Python中，可以使用多线程，但不要指望能有效利用多核。
			不过，也不用过于担心，Python虽然不能利用多线程实现多核任务，但可以通过多进程实现多核任务。多个Python进程有各自独立的GIL锁，互不影响。
			多线程的并发在Python中就是一个美丽的梦。
		6.ThreadLocal
			local_thread = threading.local()
			一个ThreadLocal变量虽然是全局变量，但每个线程都只能读写自己线程的独立副本，互不干扰。
	分布式进程：
		1.multiprocessing模块不但支持多进程，其中managers子模块还支持把多进程分布到多台机器上。
			multiprocessing.managers import BaseManager
		2.步骤
			机器一
			[1]定义一个类继承BaseManager
				class QueueManager(BaseManager):
					pass
			[2]注册queue
				QueueManager.register('get_task_queue', callable=get_task_queue_func)
				QueueManager.register('get_result_queue', callable=get_result_queue_func)
			[3]绑定端口, 设置验证码
				manager = QueueManager(address=('127.0.0.1', 5000), authkey=b'abc')
			[4]启动
				manager.start()
			机器二
			[1]创建类似的QueueManager
				class QueueManager(BaseManager):
					pass
			[2]注册，只提供名字与机器一的对应
				QueueManager.register('get_task_queue')
				QueueManager.register('get_result_queue')
			[3]验证
				m = QueueManager(address=(server_addr, 5000), authkey=b'abc')
			[4]连接
				m.connect()
			[5]获取queue
				task = m.get_task_queue()
				result = m.get_result_queue()
			[6]操作queue
十七、正则
	1.Python提供re模块，包含所有正则表达式的功能。
	2.判断是否匹配
		re.match(r'^\d$', '0') #判断是否匹配，如果匹配成功，返回一个Match对象，否则返回None
	3.切分字符串
		re.split(r'\s+', 'a b   c')
	4.分组
		m.group(1) #group(0)永远是原始字符串，group(1)、group(2)……表示第1、2、……个子串。
	5.匹配模式
		正则匹配默认是贪婪匹配，也就是匹配尽可能多的字符。
		加个?就可以让其采用非贪婪匹配   re.match(r'^(\d+?)(0*)$', '102300').groups()
	6.编译
		re模块内部会干两件事情：
		[1]编译正则表达式，如果正则表达式的字符串本身不合法，会报错；
		[2]用编译后的正则表达式去匹配字符串。
		多次使用可先使用预编译提高效率：re_c = re.compile(r'^(\d{3})-(\d{3,8})$')
十八、网络编程
	1.TCP socket模块
		服务端：
		1.创建一个socket
			s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
		2.监听端口:
			s.bind(('127.0.0.1', 9999))
		3.指定等待连接的最大数量
			s.listen(5)
		4. 接受一个新连接，这之后需要创建新的进程或线程来处理连接，否则其它连接只能等待。
			sock, addr = s.accept()
		5.发送数据
			sock.send(b'Welcome!')
		6.接收数据
			data = sock.recv(1024)
		客户端:
		1.创建socket
			s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
		2.建立连接
			s.connect(('127.0.0.1', 9999))
			sock.setblocking(0)  #通过这一步设置为异步socket
		3.接收数据
			s.recv(1024)
		4.发送数据
			s.send(data)
		5.关闭连接
			s.close()
	2.UDP
		服务端：
		1.创建socket，SOCK_DGRAM指定为UDP
			s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
		2.绑定端口:不需要调用listen()
			s.bind(('127.0.0.1', 9999))
		3. 接收数据:
			data, addr = s.recvfrom(1024)
		4.发送数据
			 s.sendto(b'Hello, %s!' % data, addr)
		客户端：
		1.创建socket
			s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
		2.发送数据，不需要建立连接
			 s.sendto(data, ('127.0.0.1', 9999))
		3.接收数据	
			s.recv(1024)
		4.关闭连接
			s.close()
	3.服务器绑定UDP端口和TCP端口互不冲突
十九、邮件
	1.Python对SMTP支持有smtplib和email两个模块，email负责构造邮件，smtplib负责发送邮件。
	2.发送邮件
		from email.mime.text import MIMEText
		import smtplib
		
		msg = MIMEText('hello, send by Python...', 'plain' or 'html', 'utf-8')
		msg['From'] = _format_addr('Python爱好者 <%s>' % from_addr) #发件人
		msg['To'] = _format_addr('管理员 <%s>' % to_addr)  #收件人
		msg['Subject'] = Header('来自SMTP的问候……', 'utf-8').encode() #主题
		server = smtplib.SMTP(smtp_server, 25) # SMTP协议默认端口是25
		server.set_debuglevel(1) #打印出和SMTP服务器交互的所有信息
		server.login(from_addr, password) #登录SMTP服务器
		server.sendmail(from_addr, [to_addr], msg.as_string()) #发邮件
		server.quit()
		
		from email.header import Header
		from email.utils import parseaddr, formataddr
		def _format_addr(s):#格式化邮件地址
			name, addr = parseaddr(s)
			return formataddr((Header(name, 'utf-8').encode(), addr))
	3.添加附件
		构造一个MIMEMultipart对象代表邮件本身，往里面加上一个MIMEText作为邮件正文，往里面加上表示附件的MIMEBase对象。
		msg = MIMEMultipart()
		msg['From'] = _format_addr('Python爱好者 <%s>' % from_addr)
		msg['To'] = _format_addr('管理员 <%s>' % to_addr)
		msg['Subject'] = Header('来自SMTP的问候……', 'utf-8').encode()

		# 邮件正文是MIMEText:
		msg.attach(MIMEText('send with file...', 'plain', 'utf-8'))
		#添加附件
		with open('/Users/michael/Downloads/test.png', 'rb') as f:
			# 设置附件的MIME和文件名，这里是png类型:
			mime = MIMEBase('image', 'png', filename='test.png')
			# 加上必要的头信息:
			mime.add_header('Content-Disposition', 'attachment', filename='test.png')
			mime.add_header('Content-ID', '<0>')
			mime.add_header('X-Attachment-Id', '0')
			# 把附件的内容读进来:
			mime.set_payload(f.read())
			# 用Base64编码:
			encoders.encode_base64(mime)
			# 添加到MIMEMultipart:
			msg.attach(mime)
		再发送
二十、访问数据库
	1.SQLLite(python内置，sqlite3模块)
		1.导入 
			import sqlite3
		2.连接
			conn = sqlite3.connect('test.db') #文件不存在则会创建
		3.创建一个Cursor
			cursor = conn.cursor()
		4.执行sql语句
			cursor.execute('create table user (id varchar(20) primary key, name varchar(20))') #占位符?
		5.获取影响结果行数
			cursor.rowcount
		6.提交数据
			conn.commit()
		7.获取查询结果(查询结果集是一个list，每个元素都是一个tuple)
			values = cursor.fetchall()
		8.关闭资源(最好在try...finally中)
			cursor.close()
			conn.close()
	2.MySQL
		1.安装
			pip install mysql-connector
		2.连接
			conn = db.connect(host = '10.11.10.64',user='root', password='sd-9898w', database='test')
		3.获取cursor
			cursor = conn.cursor()
		4.执行语句
			cursor.execute('create table user (id varchar(20) primary key, name varchar(20))')
			cursor.execute('insert into user (id, name) values (%s, %s)', ['1', 'Michael']) #mysql中占位符是s%
		5.获取影响结果行数
			cursor.rowcount
		6.提交事物
			conn.commit()
		7.关闭资源
			cursor.close()
	3.SQLAlchemy
		1.Python中，最有名的ORM框架是SQLAlchemy
		2.安装
			pip install sqlalchemy
		3.导入
			from sqlalchemy import Column, String, create_engine
			from sqlalchemy.orm import sessionmaker
			from sqlalchemy.ext.declarative import declarative_base
		4.创建基类，所有与表映射的类都要继承这个类
			Base = declarative_base()
		5.创建与表对应的类
			class User(Base):
				__tablename__ = 'user' #指定表名
				
				id = Column(String(20), primary_key=True) #表字段
				name = Column(String(20))   #表字段
				
				def __repr__(self): #格式化输出
					return "[name='%s',  id='%s']" % (
						self.name, self.id)
		6.创建引擎
			conn_msg = '数据库类型+数据库驱动名称://用户名:口令@机器地址:端口号/数据库名'
			engine = create_engine(r'mysql+mysqlconnector://root:sd-9898w@10.11.10.64:3306/test')
		7.创建会话，相当于cursor
			Session = sessionmaker(bind=engine) #注意这里是class不是对象
			session = Session() #这里才创建对象
		8.插入
			new_user = User(id='5', name='Bob')
			session.add(new_user)
		9.查询
			my_user2 = session.query(User).filter_by(id=2).all()  # filter_by相等用'='
			my_user3 = session.query(User).filter(User.id==2).all()  # filter相等用'=='
			all_user = session.query(User.id,User.name).all() #查询全部
		10.删除
			session.query(User).filter_by(id=2).delete()
		11.统计
			session.query(User).filter(User.name.like("f%")).count()
		12.分组
			session.query(User.name,func.count(User.name)).group_by(User.name).all() 
		13.事务
			session.commit()
			session.rollback()
二十一、Web框架
	1.flask
		1.安装 
			pip install flask
		2.引入
			from flask import Flask
		2.创建对象
			app = Flask(__name__)
		3.编写action，并指定路径
			@app.route('/', methods=['GET', 'POST'])
			def home():
				return 'Hello World!'
		4.启动
			if __name__ == '__main__':
				app.run(port=8888,debug=True)
		5.获取请求参数
			[post请求数据]
			from flask import request
			request.form['username']
			[get请求]
			@app.route('/hel/<user>/<name>',methods=['GET'])
			def welcom(user,name):	
				...
			request.args.get('key', '') #或使用这种方式获取
		6.上传文件
			f = request.files['the_file']
			f.save('/var/www/uploads/' + secure_filename(f.filename))
		7.cookie
			获取：
				request.cookies.get('username')
			发送：
				from flask import make_response
				resp = make_response(render_template('error.html'),404)
				resp.set_cookie('username', 'the username')
				return resp
		8.session [from flask import session]
			判断是否存在：
				if 'username' in session
			设置：
				session['username'] =  'logined'
			取：
				session.pop('username', None)
		9.重定向
			from flask import abort, redirect, url_for
			return redirect(url_for('login'))
		10.返回错误页面
			abort(401)
	2.aiohttp[见二十二(4)]
二十二、异步IO
	1.协程
		[1]生成器
			函数中出现了yield关键字，则调用该函数时会返回一个生成器。
		[2]yield
			Python的yield不但可以返回一个值，它还可以接收调用者发出的参数。
		[3]协程实现生产者消费者
			def consumer():
				r = ''
				while True:
					n = yield r #yield接收调用者发送的数据，然后执行下面的操作，最后再返回执行后的结果r
					if not n:
						return
					print('[CONSUMER] Consuming %s...' % n)
					r = '200 OK'

			def produce(c):
				c.send(None) #向刚创建的生成器发送数据，只能是None，这一步也就是启动生成器，也可以换成c.next()，待研究
				n = 0
				while n < 5:
					n = n + 1
					print('[PRODUCER] Producing %s...' % n)
					r = c.send(n)#发送数据给生成器，并接收生成器最终执行结果，这句执行后，切换成生成器执行，拿到结果后继续向下执行
					print('[PRODUCER] Consumer return: %s' % r)
				c.close() #关闭生成器

			c = consumer() #创建生成器
			produce(c)	#调用生成器
		[4]协程(coroutine)，又称微线程，看上去也是子程序，但执行过程中，在子程序内部可中断，然后转而执行别的子程序，在适当的时候再返回来接着执行。整个流程无锁，由一个线程执行。
	2.asyncio
		[1]asyncio是Python 3.4版本引入的标准库,asyncio的编程模型就是一个消息循环。我们从asyncio模块中直接获取一个EventLoop的引用，然后把需要执行的协程扔到EventLoop中执行，就实现了异步IO。
		[2]@asyncio.coroutine把一个generator标记为coroutine类型，然后，我们就把这个coroutine扔到EventLoop中执行。
		[3]一组任务并发执行
			import asyncio

			@asyncio.coroutine #标识为一个coroutine
			def wget(host):
				print('wget %s...' % host)
				connect = asyncio.open_connection(host, 80)
				reader, writer = yield from connect  #通过yield from完成异步操作connect，这里会异步执行connect操作，然后直接进入eventloop中的下一个任务，等上面的connect操作结束返回后再继续向后执行。
				header = 'GET / HTTP/1.0\r\nHost: %s\r\n\r\n' % host
				writer.write(header.encode('utf-8'))
				yield from writer.drain()
				while True:
					line = yield from reader.readline()
					if line == b'\r\n':
						break
					print('%s header > %s' % (host, line.decode('utf-8').rstrip()))
				# Ignore the body, close the socket
				writer.close()

			loop = asyncio.get_event_loop() #获取eventLoop
			tasks = [wget(host) for host in ['www.sina.com.cn', 'www.sohu.com', 'www.163.com']] #准备任务
			loop.run_until_complete(asyncio.wait(tasks)) #在事件循环中执行任务
			loop.close()
		[4]小结
			asyncio提供了完善的异步IO支持；
			异步操作需要在coroutine中通过yield from完成；
			多个coroutine可以封装成一组Task然后并发执行。
	3.async/await
		[1]简化并更好地标识异步IO，从Python 3.5(如果是3.4还是要用上面的语法)开始引入了新的语法async和await，可以让coroutine的代码更简洁易读。
		[2]将上述中的@asyncio.coroutine改为async(async放在def的前面 async def wget(host): ...),将yield from改为await
	4.aiohttp
		[1]aiohttp则是基于asyncio实现的HTTP框架。
		[2]安装
			pip install aiohttp
		[3]高并发服务
			import asyncio
			from aiohttp import web

			async def index(request):
				await asyncio.sleep(0.5)
				return web.Response(body=b'<h1>Index</h1>',content_type='text/html')

			async def hello(request):
				await asyncio.sleep(0.5)
				text = '<h1>hello, %s!</h1>' % request.match_info['name']
				return web.Response(body=text.encode('utf-8'),content_type='text/html')

			async def init(loop): #这也是一个coroutine
				app = web.Application(loop=loop) #添加路由
				app.router.add_route('GET', '/', index)  
				app.router.add_route('GET', '/hello/{name}', hello)
				srv = await loop.create_server(app.make_handler(), '127.0.0.1', 8000)  #利用asyncio创建TCP服务
				print('Server started at http://127.0.0.1:8000...')
				return srv

			loop = asyncio.get_event_loop()
			loop.run_until_complete(init(loop))
			loop.run_forever()