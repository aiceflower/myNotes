1.卡拉兹(Callatz)猜想：
对任何一个自然数n，如果它是偶数，那么把它砍掉一半；如果它是奇数，那么把(3n+1)砍掉一半。这样一直反复砍下去，最后一定在某一步得到n=1。
卡拉兹在1950年的世界数学家大会上公布了这个猜想，传说当时耶鲁大学师生齐动员，拼命想证明这个貌似很傻很天真的命题，结果闹得学生们无心学业，
一心只证(3n+1)，以至于有人说这是一个阴谋，卡拉兹是在蓄意延缓美国数学界教学与科研的进展……
我们今天的题目不是证明卡拉兹猜想，而是对给定的任一不超过1000的正整数n，简单地数一下，需要多少步（砍几下）才能得到n=1？
输入格式：每个测试输入包含1个测试用例，即给出自然数n的值。
输出格式：输出从n计算到1需要的步数。
输入样例：
3
输出样例：
5
解：
	public static void main(String[] args) {
		System.out.println(calc(3));
	}
	private static int count = 0;
		public static int calc(int num){
		if(num==1){
			return count;
		}
		if(num%2==0){
			num = num>>1;
			count ++;
			return calc(num);
		}else{
			num = ((3*num)+1)>>1;
			count++;
			return calc(num);
		}
	}
2.读入一个自然数n，计算其各位数字之和，用汉语拼音写出和的每一位数字。

输入格式：每个测试输入包含1个测试用例，即给出自然数n的值。这里保证n小于10100。

输出格式：在一行内输出n的各位数字之和的每一位，拼音数字间有1 空格，但一行中最后一个拼音数字后没有空格。

输入样例：
1234567890987654321123456789
输出样例：
yi san wu

解：
	public static void main(String[] args) {
		String str = "1234567890987654321123456789";
		int num = calc(str);
		String tmp = num + "";
		String result = "";
		for (int i = 0; i < tmp.length(); ++i) {
			int charAt = Integer.parseInt(tmp.charAt(i) + "");
			if(i==tmp.length()-1){
				result += getPingYin(charAt);
			}else{
				result += getPingYin(charAt)+" ";
			}
		}
		System.out.println(result);
	}

	public static int calc(String str) {
		int len = str.length();
		int result = 0;
		for (int i = 0; i < len; ++i) {
			int charAt = Integer.parseInt(str.charAt(i) + "");
			result += charAt;
		}
		return result;
	}

	public static String getPingYin(int num) {
		String str[] = {"ling","yi","er","san","si","wu","liu","qi","ba","jiu"};
		if(num<0||num>9){
			throw new RuntimeException("非法数字！");
		}
		return str[num] ;
	}
	