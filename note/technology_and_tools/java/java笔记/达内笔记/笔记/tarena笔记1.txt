专有名词：直接量、浮点数、单精度、双精度、取模（取余）、实例变量
	  短路逻辑(&& ||)、持久化、线性排列、变长参数、静态导入、执行计划

重构、

知识框架：变量-->基本类型(8种)-->运算符（算术、关系）

拿到一个问题时我们应该想：
	在这个问题中我都会用到哪些数据，
	这些数我应该怎么存，选结构后算法。
	程序＝ 算法＋结构

三种基本的程序结构：順序、分枝、循环。


建议：	1.变量命名不要使用中文
	2.if后如果只有一条语句也加上大括号
	3.


Book1：

Unit1:

Linux:
	1.是一个操作系统
	2.是开源的
	3.java为服务器端开发，所以要用Linux
Linux与windows区别：
	1：文件系统不同  windows是盘符的   Linux是目录的
	2：外部设备的映射不同  windows是盘符的    Linux是挂载点 目录
	3：安全级别不一样   windows 低    Linux 高

JDK（java开发工具包）、JRE（java运行环境）、JVM（java虚拟机）

JRE = JVM +java系统类库
JDK = JRE + 编译、运行等开发环境
运行最小环境为JRE
开发最小环境为JDK

C语言，编译，直接编译为可执行文件  计算机识别（0，1）
JAVA文件，编译，字节码文件，JVM运行字节码文件 ，计算机识别（0，1）

IDE : 集成开发环境，eclipse最主流的IDE eclipse为IBM公司的，开源的
eclipse是基于插件的
绿色版（只需解压，不需安装）

unit2:
	1.变量是一个代词，指代内存中的数据
	变量是可以改变的量 ---指代不同的数据

	守法	遵守语法
	道德 	建议（最好遵守）
	和谐	可扩展性好、维护性号、可移植性好
		复用性好、健壮性好。。。（12k以上）

	见名知意    驼峰命名法：


	2.int : 4 个字节 
	   整数的直接量(25.250.2500..)默认为int型 
	   Long : 8个字节
 	    直接量，在数字后加l或L
		eg:long a = 35l;
	BigInteger:可以装无限大的数

	3. long time = System.currentTimeMillis();
	
	4. 小数默认为double float 直接量加f或F

	如果想要精确运算可以用BigDecimal类来实现

	运算时以最大类型为最终类型

	3:char字符型由字符和码组成，实际上是一个16位无符号整数（无符号就是没有负数）码就是对应的整数
	Unicode 码 0～65535  
	字符型直接量都放在单引号中
	char c1 = 'A'; ‘A’为字符型直接量。
	char c2 = 65;65为 'A'所对应的码（整数）
	‘0’码48，‘a’码97，‘A’码65
	字符量放在单引号中有且只有一个
	4：boolean 占1个字节只能存储true 或 false
	常常用于表示关系或逻辑的结果

	5:基本类型之间的转换
	自动类型转换(小转大)：
	char ---->
		   |
		   |
byte-->short-->int-->long-->float-->double
	强制类型转换(大转小):（需要转换的类型）变量 eg:(ing)1.2F;
	强转可能会造成精度损失或溢出

	6:java规定了两种规则：
	1.int 直接量可以直接赋值给byte char short只要不超过其范围	
	2.byte char short 在参与运算时则一律先转成int 再计算 	

Unit3:
	取余：可用于int char 及浮点型
	关系：>,<,>=,<=,==,!=
	逻辑运算也是关系运算，运算结果为boolean
	关系运算结果为boolen型
	赋值：=,+=,-=,*=,/=,%=
	扩展赋值表达式
	
	条件运算符又称三目运算符
	
	分枝结构（四种）：
	if(){}
	if(){}else{}
	if(){}else if(){}
	switch(){case:...优：清晰，效率高。缺：整形，只能判断相等，灵活性差。
	变量的作用范围：从变量声明开始到包含它最近的大括号结束
	
unit5: 一般当。。。时候用while循环
	一般直到。。。时候用do...while
		

程序＝ 算法＋数据结构

	算法：解决问题的步骤（顺序－分枝－循环）
	数据结构：将数据按某种结构保存
	好的数据结构会导致好的算法。
数组就是最基本的一种数据结构

数组：相同数据类型的元素组成的集合
	数组按线性顺序，一个跟一个
	数组也是一种数据类型
	数组new之后，的默认值 整数：0，浮点数：0.0，
	boolean :false
	int[] arr; arr={1,3,8,3}//错误
	int[] arr= new int[3]{};//错误
	数组的复制：
	System.Arraycopy(Object src, int srcPos, 
	Object dest, int destPos, int length);
	Arrays.copyOf(类型[]original,int newLength);
	这个返回新数组（用来给数组扩容）

unit6:

	方法：用于封装一段特定的逻辑功能
		尽可能独立－－>只干一件事
	定义方法五个要素：修饰词、返回值类型、方法名
		参数列表、方法体。

	多态：
	1）一个引用指向不同对象，有不同的实现
	2）一个对象造型成不同类型，有不同的功能

	强制类型转换成功如下两种情况：
	1）引用指向的对象就是该类型
	2）引用指向的对象实现了该接口
instanceof 来避免强制转换错误



拿到问题之后：
一、设计数据结构－－－ 数据－－>变量－－>类型
（考虑会用到哪些数据，这些数据用什么来存）
二、设计程序结构－－－ 方法
三、设计实现－－－－－ 方法的实现

Book2:
unit1:
	面向过程编程：一堆方法，调来调去
	面向对象编程：以对象为核心，围绕着对象做操作
	面向接口编程：面向对象的基础之上，抽接口
		     复用性好，可维护性好，可扩展性好，移植性好...

	类和对象：
	1.现实世界是由很多对象组成的
	2.现实世界是先有对象，再抽出类
	  代码中先创建类，再创建对象
	3.一个类可以创建多个对象
	  同一个类的多个对象，结构相同，数据不同
	4.类是一种数据类型
		只能包含：
		1）描述对象所共有的特征：变量
			属性-----静的
		2）对象所共有的行为： 方法
			行为-----动的
对象创建后、其成员变量可以按照默认的方式初始化

unit2:
	方法的签名：
	方法的签名包含如下两个方面：方法名和参数列表
	一个类中，不可以有两个方法的签名完全相同。
	方法重载：方法名相同，参数类型或个数不同
	
	构造方法：
	1，构造方法常常用于给成员变量初始化
	2，与类同名，没有返回值类型
	3，构造方法是在创建对象时被自动调用

	1,引用类型数组的定义：
	Cell[] cs = new Cell[4];
	2.引用类型数组的初始化
	a)默认初始化是null.
	cell[] cs  = new Cell[4];//new 是在创建数组对象
	cs[0] = new Cell();//new 是在创建Cell对象
Book4:

unit4://*[@id="1024_div1_id"]
进程：操作系统中运行的一个任务
线程：一个线程是进程的一个顺序执行流。一个进程可以包含多个线程。.
创建线程两种方法：
	1：继承Thread并重写run方法
	2：实现Runnable接口实现run方法 public void run(){}

	线程用start方法启动而不是调用run方法启动。

	线程安全API与非线程安全API：
	StringBuffer(同)StringBuilder(非同)
	Vector和Hashtable(同)
	ArrayList和HashMap(非同)

	获取线程安全的集合方式：
	list=Collections.synchronizedList(list);
	map=Collections.synchronizedMap(map);
	set=Collections.synchronizedSet(set);
	
	线程池：1.限制数量 2.重复利用+
	ExecutorService es = Executors.newFixedThreadPool(线程数);
	es.execute(线程);//把任务交给线程池
	es.shutdown();任务完成后关闭线程池的线程
	es.shutdownNow();试图立即停止正在执行的线程。

