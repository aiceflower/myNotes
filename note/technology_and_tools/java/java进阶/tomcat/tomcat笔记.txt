1.让tomcat列出web应用根路径下的所有页面
	打开tomcat的conf目录下的web.xml修改<init-param>中的参数为true
2.让tomcat部署多个应用
	在tomcat的conf目录下的server.xml中复制文件中的<service>元素，并修改其端口
3.tomcat控制台
	status:监控服务器状态
	manager:可以部署、监控web应用
4.manager控制台用户密码配置
	tomcat的conf目录下的tomcat-users.xml 
	<!--增加一个角色，指定角色名即可-->
	<role rolename="manager-gui"/>
	<!--增加一个用户，指定用户名，密码，角色即可-->
	<user username="admin" password="admin" roles="manager-gui"/>
5.tomcat部署应用的几种方式
	1.利用tomcat的自动部署：将web应用复制到tomcat的webapps下
	2.利用控制台部署：在deploy directory or war file located on server下输入如下内容
		Context Path : /feelview
		war or directory url: D:/grgbanking/FEELViewPlus/webapp
		这种方式需要配置manager用户并登陆，才可以在页面配置，这种方式相当于第一种方式，把web应用复制到webapps下
	3.增加自定义的web部署文件
		在tomcat的conf目录下新建Catalina目录，再在其下新增localhost目录，然后在localhost目录下
		新建一个名字的xml文件--部署web应用的配置文件，该文件的主文件名将被作为web应用的虚拟路径。
		如在localhost下增加一个dd.xml，内容如下
		<Context docBase="D:/grgbanking/FEELViewPlus/webapp" debug="0" privileged="true"></Context>
		这样重启tomcat即可访问应用：http://ip:port/dd
	4.修改server.xml部署web应用
		<Context path="/hello" docBase="C:\Users\pillow\Desktop\grg\project\webDemo" debug="0" privileged="true"></Context>
		这种方式说是不推荐，会破坏tomcat系统文件
6.配置tomcat的数据源	
	tomcat5.5内置了dbcp数据源，并提供两种配置文件
	1.全局数据源，所有的web应用都可以访问
	2.局部数据源，单个应用可以访问
		修改用户配置文件，如上面的dd.xml 
		<Context docBase="D:/grgbanking/FEELViewPlus/webapp" debug="0" privileged="true">
		//jndi,java Naming Directory Interface java命令和目录接口 ，听起来很专业，其实就是为某个java对象起一个名字
			<!--name指定数据源在窗口中的jndi名
			dirverClassName指定连接驱动
			url指定数据库服务的url
			username用户名
			password密码
			maxActive数据源最大活动连接数
			maxIdle指定数据库池中最大的空闲连接数
			maxWait指定数据库池中最大等待获取连接的客户端-->
			<Resource name="jdbc/dstest" auth="Container"
				type="javax.sql.DataSource"
				dirverClassName="oracle.jdbc.driver.OracleDriver"
				url="jdbc:oracle:thin:@10.1.140.186:1521:FEELVIEW"
				username="feelview"
				password="feelview"
				maxActive="5"
				maxIdle="2"
				maxWait="10000"/>
		</Context>
7.eclipse添加插件之扩展安装
	在eclipse安装目录下新建links目录，在其中新建xxx.link文件，添加如下内容
	path=<pluginPath>
	在pluginPath路径下新建eclipse文件夹，在将插件的plugins,features目录复制到eclipse目录下重启即可
	卸载插件只需要将对应的link文件删除即可
8.tomcat中的库文件
在Tomcat目录结构中，有3组目录（“/common/*”、“/server/*”和“/shared/*”）可以存放
Java类库，另外还可以加上Web应用程序自身的目录“/WEB-INF/*”，一共4组
在/common目录中：类库可被Tomcat和所有的Web应用程序共同使用。
在/server目录中：类库可被Tomcat使用，对所有的Web应用程序都不可见。
在/shared目录中：类库可被所有的Web应用程序共同使用，但对Tomcat自己不可见。
在/WebApp/WEB-INF目录中：仅此Web应用程序使用，对Tomcat和其他Web应用程序都不可见。
9.tomcat类加载器(后面的类加载器对应加载8中各目录下库)
                                        --> Catalina类
(Bootstrap)		  (Application)		   /  (CatalinaClassLoader)
启动类-->扩展类-->应用程序类-->Common类
      (Extension)   (CommonClassLoader)\ (SharedClassLoader)
                                        --> Shared类-->WebApp类-->Jsp类
                                              (WebAppClassLoader) (JasperLoader)
其中每个web应用对应一个WebAppClassLoader,每个jsp文件对应一个Jsp类加载器	
10.如果tomcat中有10个spring的应用程序，把spring中的库放到common下，那spring中的库是如何调用各自应用中的类(打破了双亲委派原则)
 使用线程上下文类加载器，这个类加载器可以通过java.lang.Thread类的setContextClassLoader()进行设置。服务通过这个类加载器去加载所需的类。也就是父类加载器请求子类加载器去完成类加载的动作。这种行为实际上就是打通了双亲委派模型的层次结构来逆向使用类加载器										