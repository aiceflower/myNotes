1.多使用前++，少使用后++
2.循环内定义，还是循环外定义对象
ClassTest CT；
for(int i = 0; i < 100; ++i)
{
   CT = a;
   //do something
}
代码2：
for(int i = 0; i < 100; ++i)
{
   ClassTest CT = a;
   //do something
}
如果调用赋值操作函数的开销比调用构造函数和析构函数的总开销小，则第一种效率高，否则第二种的效率高。	
3.避免过大的循环
代码1：
for(int i = 0; i < n; ++i)
{
   fun1();
   fun2();
}
代码2：
for(int i = 0; i < n; ++i)
{
   fun1();
}
for(int i = 0; i < n; ++i)
{
   fun2（);
}
如果这多个函数的代码语句很少，则代码1的运行效率高一些，但是若fun1和fun2的语句有很多，规模较大，则代码2的运行效率会比代码1显著高得多。
4.静态变量效率比局部变量低
当一块数据被反复读写(局部变量)，其数据会留在CPU的一级缓存（Cache）中，访问速度非常快。而静态变量却不存在于堆栈中。
可以说静态变量是低效的。
5.减少除法运算的使用
通过数学的方法，把除法变为乘法运算，如if(a > b/c),如果a、b、c都是正数，则可写成if(a*c > b)