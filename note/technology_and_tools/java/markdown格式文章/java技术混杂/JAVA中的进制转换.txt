---
date: 2018-05-24 17:20
status: public
title: JAVA中的进制转换
---

对于进制，我们程序员都不陌生。我们常用的进制有2进制、8进制、10进制、16进制。它们之间的区别在于数运算时进位不同。2进制是逢2进1、8进制是逢8进1、10进制是逢10进1、16进制是逢16进1。2进制的存在是因为计算机只能识别0和1故有了2进制。10进制是因为我们常用的数字表示法是10进制。那么8进制和16进制为什么存在呢。为了减少书写的复杂性和读起来也更直观引入了8进制和16进制。下面我们就看下这些进制之间是如何转换的。

#### 十进制转二进制：
方法：十进制数除2取余法，即十进制数除2，余数从右到左放，得到的商值继续除2，依此步骤继续向下运算直到商为0为止。
如：100 转换为2进制步骤如下：
100 / 2 商为50 余数为0  -> 0
50 /2    商为25余数为0  -> 00
25 /2    商为12余数为1   -> 100
12 / 2   商为6 余数为0   -> 0100
6 /2  商为3余数为 0    ->  00100
3 /2  商为1  余数为 1   -> 100100
1 /2  商为0 余数为1  ->  1100100
到商为0为止，即100的二进制表示为 1100100

#### 二进制转十进制:
方法：把二进制数每位按权展开(按权展开：进制数乘以对应的权数次方，如二进制数1100100左边第一位按权展开为 0 * 2 ^ 0 = 0 )、相加即得十进制数。其中权就是从右往左数第几位数
如1100100从右往左每位数的权依次为：0、1、2、3、4、5、6
那么把2进制1100100转换为10进制就是  0*2^0 + 0*2^1 + 1*2^2 + 0*2^3 + 0*2^4 +1*2^5 + 1*2^6 = 0+0+4+0+0+32+64 = 100 ,即2进制1100100对应的10进制数为100

#### 二进制转八进制
方法：从右往左每3位二进制数按权展开(注意三位的权分别为0、1、2)相加得到1位八进制数。不足3位左边补0.
如1100100 转换为8进制就是
右边3位  100 -> 0*2^0 + 0*2^1 + 1*2^2 = 4
中间3位  100 -> 0*2^0 + 0*2^1 + 1*2^2 = 4
左边3位  001 -> 1*2^0 + 0*2^1 + 0*2^2 = 1
所以1100100转换为8进制为 144

#### 八进制转二进制
方法：八进制数每位数通过除2取余法，得到二进制数，对每个八进制为3个二进制位，不足时在最左边补零。
如8进制144转换为2进制
第一个8进制位：4  按十进制转二进制计算得  100
第二个8进制位：4  按十进制转二进制计算得  100
第三个8进制位：1  按十进制转二进制计算得  1 不足3位左边补0，即001
故八进制144转换为2进制为 001100100习惯上去掉左边的0即为1100100

#### 二进制转十六进制
方法：与二进制转八进制方法近似，八进制是取三合一，十六进制是取四合一。4位二进制转成十六进制是从右到左开始转换，不足时补0
如：1100100转换为16进制
右边4位 0100 -> 0*2^0 + 0*2^1 + 1*2^2 +0*2^3 = 4
左边4位0110 -> 0*2^0 + 1*2^1 +1*2^2 +0*2^3 = 6
1100100转换为16进制为 64

#### 十六进制转二进制
方法：十六进制数每位数通过除2取余法，得到二进制数，对每个十六进制为4个二进制位，不足时在最左边补零。
如16进制64转换为2进制
第一个16进制位: 4 按十进制转二进制计算得 100，不足4位左边补0，即0100
第二个16进制位:  6按十进制转二进制计算得 110，不足4位左边补0，即0110
故16进制64转换为2进制为 01100100习惯上去掉左边的0即为1100100

#### 十进制转八进制
方法1：十进制转换为二进制，然后二进制换为8进制
方法2：把十进制转八进制按照除8取余，余数从右至左放，直到商为0为止。
如：10进制100转换为8进制
100 / 8  商为12 余数为 4   -> 4
12 / 8 商为1 余数为 4  -> 44
1 / 8 商为0 余数为 1 -> 144
到商为0为止，即100的8进制表示为 144

#### 十进制转十六进制
方法1：十进制转换为二进制，然后二进制换为十六进制
方法2：把十进制转十六进制按照除16取余，余数从右至左放，直到商为0为止。
如：10进制100转换为16进制
100 / 16  商为6 余数为 4   -> 4
6 / 16 商为0 余数为 6  -> 64
到商为0为止，即100的16进制表示为 64

#### 八进制转十进制
方法：把八进制数每位按权展开(按权展开：进制数乘以对应的权数次方，如八进制数144左边第一位按权展开为 4 * 8 ^ 0 = 4  )、相加即得十进制数。
如：八进制 144转换为10进制， 4* 8 ^ 0 + 4 * 8 ^ 1 +1 * 8 ^ 2 = 4 + 32 + 64 = 100

#### 十六进制转10进制
方法：把十六进制数每位按权展开(按权展开：进制数乘以对应的权数次方，如十六进制数64左边第一位按权展开为 4 * 16 ^ 0 = 4  )、相加即得十进制数。
如：十六进制数64转换为10进制， 4 * 16 ^0 + 6 *  16 ^ 1 = 4 + 96 = 100

#### 八进制与十六进制互转
方法一：八进制(十六进制)先转换为二进制，然后二进制再转换为十六进制(八进制)
方法二：八进制(十六进制)先转换为十进制，然后十进制再转换为十六进制(八进制)

#### 十进制转换为其它进制
方法：把十进制转其它进制按照除进制数取余，余数从右至左放，直到商为0为止。
如：10进制100转换为7进制(其它进制类似)
100 / 7  商为14  余数为 2   -> 2
14 / 7 商为2 余数为0  -> 02
2 / 7 商为0 余数为 2  -> 202
到商为0为止，即100的7进制表示为 202

#### 其它进制转换为10进制
方法：把其它进制数每位按权展开(按权展开：进制数乘以对应的权数次方，如七进制数202左边第一位按权展开为 2 * 7 ^ 0 = 2  )、相加即得十进制数。
如：7进制202转换为10进制，2 * 7 ^ 0 + 0 *  7 ^ 1 + 2 * 7 ^ 2 = 2 + 0 + 98 = 100

至此各进制之间的转换就到此结束了，下面我们看下java中是如何进行这些进制转换。
#### 十进制转其它进制
Integer.toHexString(10);　　将10进制100转换为十六进制，返回字符串类型
Integer.toOctalString(10);　 将10进制100转为八进制，返回字符串类型
Integer.toBinaryString(10);　将10进制100转为二进制，返回字符串类型
Integer.toString(100, 7);        将10进制100转换为7进制，返回字符串类型，其它第一个参数为待转换的10进制数，第二个参数是需要转换的进制。

#### 其它进制转换为十进制
方法一：Integer.valueOf("FFFF",16).toString();　例为16进制转换为10进制，如果是其它进制第二个参数传进制数，第一个参数传对应的进制表示法
方法二:Integer.parseInt("FFFF",16);　　例为16进制转换为10进制，如果是其它进制第二个参数传进制数，第一个参数传对应的进制表示法
方法三：Integer.toString(0xFFFF);　　//该方法可直接传入表示十六进制数字的基本数据类型，传入指定的进制表示法的数字即可，16进制表示法：数前面加 0x如0xff，8进制表示法数前面加0如014，注意该方法无法转换为2进制数，程序无法识别2进制，比如你传100,程序是当10进制100处理还是当2进制4处理，有歧义，故无法识别，程序默认是按10进制数处理的

有了十进制和其它进制之间的转换，那么两个其它进制之间的转换只需要以10进制为中介就可以了，如八进制转换为十六进制，先将八进制转换为十进制，然后再将十进制转换为十六进制。其它类似。


